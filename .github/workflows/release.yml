name: Build & Release

on:
  workflow_dispatch: {}

jobs:
  build-windows:
    runs-on: windows-2022
    outputs:
      exe-path: ${{ steps.package.outputs.exe-path }}
      bat-path: ${{ steps.package.outputs.bat-path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/index
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Validate GitHub App secrets
        run: |
          if (-not $env:TARIUM_EMBED_GITHUB_APP_ID) {
            Write-Error "TARIUM_GITHUB_APP_ID secret is not set"
            exit 1
          }
          if (-not $env:TARIUM_EMBED_GITHUB_INSTALLATION_ID) {
            Write-Error "TARIUM_GITHUB_INSTALLATION_ID secret is not set"
            exit 1
          }
          if (-not $env:TARIUM_EMBED_GITHUB_PRIVATE_KEY) {
            Write-Error "TARIUM_GITHUB_PRIVATE_KEY secret is not set"
            exit 1
          }
          Write-Host "All GitHub App secrets are present"
        env:
          TARIUM_EMBED_GITHUB_APP_ID: ${{ secrets.TARIUM_GITHUB_APP_ID }}
          TARIUM_EMBED_GITHUB_INSTALLATION_ID: ${{ secrets.TARIUM_GITHUB_INSTALLATION_ID }}
          TARIUM_EMBED_GITHUB_PRIVATE_KEY: ${{ secrets.TARIUM_GITHUB_PRIVATE_KEY }}

      - name: Build release with embedded credentials
        run: |
          Write-Host "Building Tarium with embedded GitHub App credentials..."
          cargo build --release
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed with exit code: $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          Write-Host "Build completed successfully"
        env:
          TARIUM_EMBED_CREDENTIALS: "1"
          TARIUM_EMBED_GITHUB_APP_ID: ${{ secrets.TARIUM_GITHUB_APP_ID }}
          TARIUM_EMBED_GITHUB_INSTALLATION_ID: ${{ secrets.TARIUM_GITHUB_INSTALLATION_ID }}
          TARIUM_EMBED_GITHUB_PRIVATE_KEY: ${{ secrets.TARIUM_GITHUB_PRIVATE_KEY }}

      - name: Verify embedded credentials
        run: |
          Write-Host "Testing embedded GitHub App credentials..."
          .\target\release\tarium.exe auth status
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Embedded credentials test failed"
            exit 1
          }
          Write-Host "Embedded credentials working correctly"

      - name: Prepare release files
        id: package
        shell: cmd
        run: |
          mkdir release
          copy target\release\tarium.exe release\tarium.exe
          if exist OPEN-CMD.bat (
            copy OPEN-CMD.bat release\OPEN-CMD.bat
          ) else (
            echo @echo off>release\OPEN-CMD.bat
            echo pushd "%%~dp0">>release\OPEN-CMD.bat
            echo.>>release\OPEN-CMD.bat
            echo ================= SPT Mod Manager =================>>release\OPEN-CMD.bat
            echo Basic commands:>>release\OPEN-CMD.bat
            echo   tarium.exe list - list installed mods>>release\OPEN-CMD.bat
            echo ==================================================>>release\OPEN-CMD.bat
            echo.>>release\OPEN-CMD.bat
            echo cmd.exe /k>>release\OPEN-CMD.bat
            echo popd>>release\OPEN-CMD.bat
          )
          echo exe-path=release\\tarium.exe >> %GITHUB_OUTPUT%
          echo bat-path=release\\OPEN-CMD.bat >> %GITHUB_OUTPUT%

      - name: Stage artifact root
        run: |
          mkdir artifact-root
          copy release\tarium.exe artifact-root\tarium.exe
          copy release\OPEN-CMD.bat artifact-root\OPEN-CMD.bat

      - name: Upload build outputs
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: artifact-root/**

  publish:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: artifacts

      - name: Get current date
        id: date
        run: echo "date=$(date +'%d-%m-%Y')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.run_id }}-${{ steps.date.outputs.date }}
          name: ${{ steps.date.outputs.date }}
          body: Release created on ${{ steps.date.outputs.date }}
          files: |
            artifacts/tarium.exe
            artifacts/OPEN-CMD.bat
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
